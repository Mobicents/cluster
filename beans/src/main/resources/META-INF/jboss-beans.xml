<?xml version="1.0" encoding="UTF-8"?>

<deployment xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:jboss:bean-deployer:2.0">



	<!-- FIXME: this should be defined in project? -->
	<bean name="Mobicents.CacheConfig" class="org.jboss.cache.config.Configuration">

         <!-- Node locking scheme -->
         <!-- 
         	<property name="nodeLockingScheme">PESSIMISTIC</property>
         	<property name="useLockStriping">false</property>
          -->
         <property name="isolationLevel">REPEATABLE_READ</property>

      <property name="cacheMode">LOCAL</property>
      <property name="lockParentForChildInsertRemove">false</property>
      <property name="concurrencyLevel">10000</property>

         <!-- Must use REPL since used for timestamp caching. 
              Must use SYNC to maintain cache coherency for entities. -->
         <property name="cacheMode">LOCAL</property> 

         <!-- Name of cluster. Needs to be the same for all members -->
         <property name="clusterName">${jboss.partition.name:DefaultPartition}-pess-shared-rr-22</property>        
         <!-- Use a UDP (multicast) based stack. Need JGroups flow control (FC)
             because timestamp communication will not require a synchronous response. -->
         <property name="multiplexerStack">${jboss.default.jgroups.stack:udp}</property>
         <!-- Used for timestamps, so must fetch state. -->
         <property name="fetchInMemoryState">true</property>

         <!-- The max amount of time (in milliseconds) we wait until the
           state (ie. the contents of the cache) are retrieved from
           existing members at startup. Ignored if FetchInMemoryState=false.
-->
         <property name="stateRetrievalTimeout">60000</property>

         <!-- Number of milliseconds to wait until all responses for a
               synchronous call have been received. -->
         <property name="syncReplTimeout">17500</property>

         <!-- Max number of milliseconds to wait for a lock acquisition -->
         <property name="lockAcquisitionTimeout">15000</property>

         <!-- Hibernate 2LC can replicate custom types, so we use marshalling -->
         <property name="useRegionBasedMarshalling">true</property>
         <!-- Must match the value of "useRegionBasedMarshalling" -->
         <property name="inactiveOnStartup">true</property>

         <!-- Disable asynchronous RPC marshalling/sending -->
         <property name="serializationExecutorPoolSize">3</property>        
         <!-- We have no asynchronous notification listeners -->
         <property name="listenerAsyncPoolSize">3</property>        

      </bean>

	<bean name="Mobicents.JBossCacheFactory" class="org.jboss.cache.DefaultCacheFactory">      
      <constructor factoryClass="org.jboss.cache.DefaultCacheFactory" factoryMethod="getInstance" />
   </bean>
	<bean name="Mobicents.Cache" class="org.mobicents.slee.runtime.cache.MobicentsCache">
		<constructor>
          	<!-- 
          	<parameter><inject bean="jboss.cache:service=CacheManager"></inject></parameter>
          	<parameter class="java.lang.String">pessimistic-shared-repeatable</parameter>
          	<parameter><inject bean="RealTransactionManager"/></parameter>
            -->
           
          <parameter class="org.jboss.cache.CacheFactory"><inject bean="Mobicents.JBossCacheFactory"/></parameter>
          <parameter class="org.jboss.cache.config.Configuration"><inject bean="Mobicents.CacheConfig"/></parameter>
          <parameter class="javax.transaction.TransactionManager"><inject bean="RealTransactionManager"/></parameter>
      
     	</constructor>			
     	<start method="startRootRegion">
     		<parameter>
     			<inject bean="Mobicents.CacheClassLoader"/>
     		</parameter>
     	</start>
     	<!-- 
     	<demand>Mobicents.CacheClassLoader</demand>
     	 -->
     	<demand>Mobicents.JBossCacheFactory</demand>
     	<demand>Mobicents.CacheConfig</demand>
	</bean>
	
	<bean name="Mobicents.TimerFacilityCacheData" class="org.mobicents.slee.runtime.cache.TimerTasksCacheData">
      <constructor factoryMethod="getTimerFacilityCacheData" >
      	<factory bean="Mobicents.Cache"/>
      </constructor>
      <demand>Mobicents.Cache</demand>
   </bean>
   
	<bean name="Mobicents.FTFDefaultElector" class="org.mobicents.ftf.election.SimpleSingletonElector">
	</bean>
	
	<bean name="Mobicents.FTFRegistration" class="org.mobicents.ftf.FTFRegistration">
		<annotation>@org.jboss.aop.microcontainer.aspects.jmx.JMX(name="javax.slee:name=Mobicents.FTFRegistration",exposedInterface=org.mobicents.ftf.FTFRegistrationMBean.class,registerDirectly=true)</annotation>

		<property name="transactionManager">
			<inject bean="Mobicents.TransactionManager" />
		</property>
		<property name="defaultElectionPolicy">
			<inject bean="Mobicents.FTFDefaultElector" />
		</property>
		<!-- demand>HAPartition</demand -->
		<demand>Mobicents.FTFDefaultElector</demand>
		<demand>Mobicents.TransactionManager</demand>
	</bean>
	
	
   <bean name="Mobicents.FTFStrategy" class="org.mobicents.ftf.FTFClusterWideReplicationSICacheListener">
    
   </bean>
	<bean name="Mobicents.FTF.TimerResourceGroupData" class="org.mobicents.ftf.resource.ResourceGroupData">
		<constructor factoryClass="org.mobicents.ftf.resource.ResourceGroup" factoryMethod="createResourceGroupData">
			<parameter>/timertasks</parameter>
			<parameter>5</parameter>
			<parameter><inject bean="Mobicents.TimerFacilityCacheData"/></parameter>
		</constructor>
		<demand>Mobicents.TimerFacilityCacheData</demand>
	</bean>

	<bean name="Mobicents.FTF.ResourceGroup" class="org.mobicents.ftf.resource.ResourceGroup">
		<constructor>
			<parameter class="java.lang.String">SleeResourceGroup</parameter>
		</constructor>
		
		<property name="resource">
			<inject bean="Mobicents.FTF.TimerResourceGroupData"/>
		</property>
		<property name="replicationListener">
			<inject bean="Mobicents.FTFStrategy"/>
		</property>
		
		<demand>Mobicents.FTF.TimerResourceGroupData</demand>
		<demand>Mobicents.FTFStrategy</demand>
	</bean>
 
	<!-- SCHEDULER BEAN -->
	<bean name="FaultTolerantScheduler" class="org.mobicents.slee.core.timers.FaultTolerantScheduler">
		<annotation>@org.jboss.aop.microcontainer.aspects.jmx.JMX(name="javax.slee:name=FaultTolerantScheduler",exposedInterface=org.mobicents.slee.core.timers.FaultTolerantSchedulerMBean.class,registerDirectly=true)</annotation>
		<property name="corePoolSize">16</property>
		<property name="cacheData" >
			<inject bean="Mobicents.TimerFacilityCacheData"/>
		</property>


		<demand>Mobicents.TimerFacilityCacheData</demand>
	</bean>
	 
	
   	
</deployment>
